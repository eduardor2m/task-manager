// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package bridge

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteUserByEmail = `-- name: DeleteUserByEmail :one

DELETE FROM "user" WHERE email = $1 RETURNING id, username, email, password, created_at, updated_at
`

func (q *Queries) DeleteUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const signin = `-- name: Signin :one

SELECT id, username, email, password, created_at, updated_at FROM "user" WHERE email = $1 and password = $2 LIMIT 1
`

type SigninParams struct {
	Email    string
	Password string
}

func (q *Queries) Signin(ctx context.Context, arg SigninParams) (User, error) {
	row := q.db.QueryRowContext(ctx, signin, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const signup = `-- name: Signup :one

INSERT INTO "user" (id, username, email, password, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, username, email, password, created_at, updated_at
`

type SignupParams struct {
	ID        uuid.UUID
	Username  string
	Email     string
	Password  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) Signup(ctx context.Context, arg SignupParams) (User, error) {
	row := q.db.QueryRowContext(ctx, signup,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
