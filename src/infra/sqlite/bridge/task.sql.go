// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: task.sql

package db

import (
	"context"
	"time"
)

const createTask = `-- name: CreateTask :exec

INSERT INTO task (title, description, completed, created_at, updated_at) VALUES (?, ?, ?, ?, ?)
`

type CreateTaskParams struct {
	Title       string
	Description string
	Completed   int64
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteTask = `-- name: DeleteTask :exec

DELETE FROM task WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one

SELECT id, title, description, completed, created_at, updated_at FROM task WHERE id = ?
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :exec

UPDATE task SET title = ?, description = ?, completed = ?, updated_at = ? WHERE id = ?
`

type UpdateTaskParams struct {
	Title       string
	Description string
	Completed   int64
	UpdatedAt   time.Time
	ID          int64
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
